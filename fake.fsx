#r @"./tools/FAKE/tools/FakeLib.dll"
open Fake

let buildDir = "./build"
let slnFilePath = "./src/EnergyProviderAdapter.sln"

Target "Clean" (fun _ ->
   CleanDir buildDir
)

Target "RestoreNuGetPackages" (fun _ ->
   let result =
      ExecProcess (fun info -> 
         info.FileName <- "./tools/NuGet/nuget.exe"
         info.Arguments <- "restore " + slnFilePath + " -noninteractive" 
      )(System.TimeSpan.FromMinutes 2.0)     
   
   if result <> 0 then failwith "NuGet restore failed or timed out"  
)

let compileSingleProviderAdapter providerName brandCodePrefix =
   let outputPath = currentDirectory @@ buildDir @@ "Energy" @@ "2.0" @@ "test" @@ providerName 
      
   WriteFile "./src/Energy.ProviderAdapter/Provider.cs" 
      [
         "// Auto-generated by fake script"
         "namespace Energy.ProviderAdapter"
         "{"
         "    public static class Provider"
         "    {"
         "        public const string Name = \"" + providerName + "\";"
         "        public const string BrandCodePrefix = \"" + brandCodePrefix + "\";"
         "    }"
         "}"
      ]    

   let compileOptions defaults =
      { 
         defaults with
            Verbosity = Some MSBuildVerbosity.Minimal
            Targets = ["Build"]
            RestorePackagesFlag = true
            Properties =
            [
               "OutputPath", outputPath
            ]
      }
   
   build compileOptions slnFilePath |> DoNothing

Target "Compile" (fun _ ->
    compileSingleProviderAdapter "EnergyHelpLine" "EHL"
)   

"Clean"
   ==> "RestoreNuGetPackages"
   ==> "Compile"

RunTargetOrDefault "Compile"
